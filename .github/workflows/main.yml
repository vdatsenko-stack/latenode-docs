name: Lint, Format, and Deploy Documentation

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  lint-and-format:
    if: "!contains(github.event.head_commit.message, 'chore: auto-format')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Tools and Dependencies
        run: |
          npm install -g prettier markdownlint-cli
          npm install glob

      - name: Fix Content Issues
        run: node .github/scripts/fix-content.js # Переименовал для ясности

      - name: Auto-fix and Format Markdown Files
        run: |
          markdownlint --fix ./**/*.md || true
          prettier --write ./**/*.md

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: auto-format markdown files"

  deploy:
    needs: lint-and-format
    if: "contains(github.event.head_commit.message, '[deploy]') && !contains(github.event.head_commit.message, 'chore: auto-format')"
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH host
        run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Trigger Deploy on Server
        id: deploy_step
        # Запускаем скрипт, передавая хеш коммита, и продолжаем даже если он упадет
        continue-on-error: true
        run: |
          ssh -T ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "bash /var/www/my-docusaurus-site/deploy.sh ${{ github.sha }}"

      - name: Download Build Log from Server
        # Этот шаг выполняется всегда
        if: always()
        run: |
          # Скачиваем лог-файл с сервера в текущую директорию Actions
          scp -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/var/www/my-docusaurus-site/deploy_logs/build_log_${{ github.sha }}.log ./build_log.log

      - name: Upload Build Log as Artifact
        # Этот шаг выполняется всегда
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-log-${{ github.sha }}
          path: ./build_log.log

      - name: Check Deploy Status
        # Проверяем, упал ли шаг деплоя, и если да - тоже падаем
        if: steps.deploy_step.outcome == 'failure'
        run: |
          echo "Сборка на сервере не удалась. Смотрите лог в артефактах."
          exit 1
